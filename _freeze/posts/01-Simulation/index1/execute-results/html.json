{
  "hash": "1e5bfc6f627842ad054561dbfd92751d",
  "result": {
    "markdown": "---\ntitle: \"01 - Simulation\"\n---\n\nMini Project 1: Simulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nNormal Min\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 2   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nnorm_single_sample <- rnorm(n, mu, sigma) |> round(2)\n# look at the sample\nnorm_single_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7.96 12.22 10.85  9.57  6.70\n```\n:::\n\n```{.r .cell-code}\n# compute the sample min\nnorm_sample_min <- min(norm_single_sample)\n# look at the sample min\nnorm_sample_min   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.7\n```\n:::\n\n```{.r .cell-code}\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dnorm(xvals, mu, sigma))\n\n## plot the population model density curve\nggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  ## add the sample points from your sample\n  geom_jitter(data = tibble(norm_single_sample), aes(x = norm_single_sample, y = 0),\n              width = 0, height = 0.005) +\n  ## add a line for the sample min\n  geom_vline(xintercept = norm_sample_min, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Normal with Mu = 10 and sigma = 2\")\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_min <- function(mu, sigma, n) {\n  \n  norm_single_sample <- rnorm(n, mu, sigma)\n  norm_sample_min <- min(norm_single_sample)\n  \n  return(norm_sample_min)\n}\n\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8.33607\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nnorm_mins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nnorm_mins_df <- tibble(norm_mins)\nnorm_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n   norm_mins\n       <dbl>\n 1      8.68\n 2      9.75\n 3      7.07\n 4      8.90\n 5      6.30\n 6      9.24\n 7      8.39\n 8      8.47\n 9      9.00\n10      8.68\n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = norm_mins_df, aes(x = norm_mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnorm_mins_df |>\n  summarise(mean_samp_dist = mean(norm_mins),\n            var_samp_dist = var(norm_mins),\n            sd_samp_dist = sd(norm_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           7.67          1.80         1.34\n```\n:::\n:::\n\n\nNormal Max\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 2   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rnorm(n, mu, sigma) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.52 13.41  5.79 10.64  9.77\n```\n:::\n\n```{.r .cell-code}\n# compute the sample min\nsample_max <- max(single_sample)\n# look at the sample min\nsample_max   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13.41\n```\n:::\n\n```{.r .cell-code}\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dnorm(xvals, mu, sigma))\n\n## plot the population model density curve\nggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  ## add the sample points from your sample\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  ## add a line for the sample min\n  geom_vline(xintercept = sample_max, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Normal with Mu = 10 and sigma = 2\")\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5           # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_samp_max <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.97347\n```\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nnorm_maxs_df <- tibble(maxs)\nnorm_maxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n    maxs\n   <dbl>\n 1  11.7\n 2  12.4\n 3  11.8\n 4  10.9\n 5  12.0\n 6  13.5\n 7  11.5\n 8  15.7\n 9  10.8\n10  13.9\n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = norm_maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnorm_maxs_df |>\n  summarise(mean_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           12.3          1.78         1.33\n```\n:::\n:::\n\n\nUniform Min\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\ntheta1 <- 7\ntheta2 <- 13\nmu <- (theta1+theta2)/2   # population mean\nsigma <- sqrt(((theta1+theta2)^2)/12 ) # population standard deviation\n\ngenerate_unif_min <- function(theta1,theta2, n) {\n  \n  unif_single_sample <- runif(n, theta1,theta2)\n  unif_sample_min <- min(unif_single_sample)\n  \n  return(unif_sample_min)\n}\n\n## test function once:\ngenerate_unif_min(theta1 = theta1, theta2=theta2, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.234421\n```\n:::\n\n```{.r .cell-code}\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nunif_mins <- map_dbl(1:nsim, \\(i) generate_unif_min(theta1 = theta1, theta2=theta2, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nunif_mins_df <- tibble(unif_mins)\nunif_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n   unif_mins\n       <dbl>\n 1      8.46\n 2      7.59\n 3      7.20\n 4      8.52\n 5      7.48\n 6      9.69\n 7      8.50\n 8      7.56\n 9      8.10\n10      7.91\n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = unif_mins_df, aes(x = unif_mins)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunif_mins_df |>\n  summarise(mean_samp_dist = mean(unif_mins),\n            var_samp_dist = var(unif_mins),\n            sd_samp_dist = sd(unif_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           8.00         0.733        0.856\n```\n:::\n:::\n\n\nUniform Max\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\ntheta1 <- 7\ntheta2 <- 13\nmu <- (theta1+theta2)/2   # population mean\nsigma <- sqrt(((theta1+theta2)^2)/12 ) # population standard deviation\n\ngenerate_unif_max <- function(theta1,theta2, n) {\n  \n  unif_single_sample <- runif(n, theta1,theta2)\n  unif_sample_max <- max(unif_single_sample)\n  \n  return(unif_sample_max)\n}\n\n## test function once:\ngenerate_unif_max(theta1 = theta1, theta2=theta2, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.91816\n```\n:::\n\n```{.r .cell-code}\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nunif_maxs <- map_dbl(1:nsim, \\(i) generate_unif_max(theta1 = theta1, theta2=theta2, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nunif_maxs_df <- tibble(unif_maxs)\nunif_maxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n   unif_maxs\n       <dbl>\n 1      12.0\n 2      10.9\n 3      12.2\n 4      11.2\n 5      12.7\n 6      12.4\n 7      12.2\n 8      12.5\n 9      12.8\n10      10.0\n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = unif_maxs_df, aes(x = unif_maxs)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nunif_maxs_df |>\n  summarise(mean_samp_dist = mean(unif_maxs),\n            var_samp_dist = var(unif_maxs),\n            sd_samp_dist = sd(unif_maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           12.0         0.733        0.856\n```\n:::\n:::\n\n\nExponential Min\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nlambda <- .5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_exp_min <- function(lambda, n) {\n  \n  exp_single_sample <- rexp(n, lambda)\n  exp_sample_min <- min(exp_single_sample)\n  \n  return(exp_sample_min)\n}\n\n## test function once:\ngenerate_exp_min(lambda = lambda, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.134608\n```\n:::\n\n```{.r .cell-code}\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nexp_mins <- map_dbl(1:nsim, \\(i) generate_exp_min(lambda = lambda, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nexp_mins_df <- tibble(exp_mins)\nexp_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n   exp_mins\n      <dbl>\n 1   0.658 \n 2   0.176 \n 3   0.0709\n 4   0.149 \n 5   0.0306\n 6   0.550 \n 7   0.0250\n 8   0.395 \n 9   0.147 \n10   0.245 \n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = exp_mins_df, aes(x = exp_mins)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_mins_df |>\n  summarise(mean_samp_dist = mean(exp_mins),\n            var_samp_dist = var(exp_mins),\n            sd_samp_dist = sd(exp_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1          0.394         0.147        0.383\n```\n:::\n:::\n\n\nExponential Max\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5    # sample size\nlambda <- .5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_exp_max <- function(lambda, n) {\n  \n  exp_single_sample <- rexp(n, lambda)\n  exp_sample_max <- max(exp_single_sample)\n  \n  return(exp_sample_max)\n}\n\n## test function once:\ngenerate_exp_max(lambda = lambda, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8.143149\n```\n:::\n\n```{.r .cell-code}\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nexp_maxs <- map_dbl(1:nsim, \\(i) generate_exp_max(lambda = lambda, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nexp_maxs_df <- tibble(exp_maxs)\nexp_maxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n   exp_maxs\n      <dbl>\n 1     7.42\n 2     2.41\n 3     9.18\n 4     3.75\n 5     2.07\n 6     5.69\n 7     5.54\n 8     2.99\n 9     3.30\n10     5.33\n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = exp_maxs_df, aes(x = exp_maxs)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_maxs_df |>\n  summarise(mean_samp_dist = mean(exp_maxs),\n            var_samp_dist = var(exp_maxs),\n            sd_samp_dist = sd(exp_maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1           4.52          5.72         2.39\n```\n:::\n:::\n\n\nBeta Min\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nalpha <- 8\nbeta <- 2\nmu <- (alpha)/(alpha+beta)  # population mean\nsigma <- sqrt((alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)) ) # population standard deviation\n\ngenerate_beta_min <- function(alpha,beta, n) {\n  \n  beta_single_sample <- rbeta(n, alpha,beta)\n  beta_sample_min <- min(beta_single_sample)\n  \n  return(beta_sample_min)\n}\n\n## test function once:\ngenerate_beta_min(alpha = alpha, beta=beta, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6497049\n```\n:::\n\n```{.r .cell-code}\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nbeta_mins <- map_dbl(1:nsim, \\(i) generate_beta_min(alpha = alpha, beta=beta, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nbeta_mins_df <- tibble(beta_mins)\nbeta_mins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n   beta_mins\n       <dbl>\n 1     0.844\n 2     0.805\n 3     0.618\n 4     0.625\n 5     0.752\n 6     0.821\n 7     0.731\n 8     0.829\n 9     0.619\n10     0.646\n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = beta_mins_df, aes(x = beta_mins)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta_mins_df |>\n  summarise(mean_samp_dist = mean(beta_mins),\n            var_samp_dist = var(beta_mins),\n            sd_samp_dist = sd(beta_mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1          0.647        0.0113        0.106\n```\n:::\n:::\n\n\nBeta Max\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nalpha <- 8\nbeta <- 2\nmu <- (alpha)/(alpha+beta)  # population mean\nsigma <- sqrt((alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)) ) # population standard deviation\n\ngenerate_beta_max <- function(alpha,beta, n) {\n  \n  single_sample <- rbeta(n, alpha,beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_beta_max(alpha = alpha, beta=beta, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8726206\n```\n:::\n\n```{.r .cell-code}\n#> [1] 3.915946\n\nnsim <- 5000      # number of simulations\n\nmaxs <- map_dbl(1:nsim, \\(i) generate_beta_max(alpha = alpha, beta=beta, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nbeta_maxs_df <- tibble(maxs)\nbeta_maxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,000 × 1\n    maxs\n   <dbl>\n 1 0.920\n 2 0.973\n 3 0.890\n 4 0.879\n 5 0.982\n 6 0.908\n 7 0.917\n 8 0.915\n 9 0.866\n10 0.930\n# ℹ 4,990 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(data = beta_maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"darkolivegreen4\", fill = \"darkolivegreen1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbeta_maxs_df |>\n  summarise(mean_samp_dist = mean(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_samp_dist var_samp_dist sd_samp_dist\n           <dbl>         <dbl>        <dbl>\n1          0.922       0.00204       0.0452\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n## create population graphs\n\n\nnorm_df <- tibble(x = seq(3, 17, length.out = 1000),\n                  dens = dnorm(x, mean = 10, sd = 2),\n                  pop = \"normal(10, 4)\")\nunif_df <- tibble(x = seq(7, 13, length.out = 1000),\n                  dens = dunif(x, 7, 13),\n                  pop = \"uniform(7, 13)\")\nexp_df <- tibble(x = seq(0, 10, length.out = 1000),\n                 dens = dexp(x, 0.5),\n                 pop = \"exp(0.5)\")\nbeta_df <- tibble(x = seq(0, 1, length.out = 1000),\n                  dens = dbeta(x, 8, 2),\n                  pop = \"beta(8, 2)\")\n\npop_plot <- bind_rows(norm_df, unif_df, exp_df, beta_df) |>\n  mutate(pop = fct_relevel(pop, c(\"normal(10, 4)\", \"uniform(7, 13)\",\n                                  \"exp(0.5)\", \"beta(8, 2)\")))\n\n\nggplot(data = pop_plot, aes(x = x, y = dens)) +\n  geom_line() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Population Distributions for Each Simulation Setting\")\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nI wasn't able to plot the histograms together like this, so I made histograms throughout the document for Ymax and Ymin of each distribution.\n\n|                      | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n| $\\text{E}(Y_{min})$  |                7.65                |                    7.98                    |             .4              |                 .65                  |\n| $\\text{E}(Y_{max})$  |               12.34                |                   12.01                    |            4.55             |                 .93                  |\n|                      |                                    |                                            |                             |                                      |\n| $\\text{SE}(Y_{min})$ |                1.35                |                    .83                     |             .4              |                 .11                  |\n| $\\text{SE}(Y_{max})$ |                1.35                |                    .83                     |            2.37             |                 .045                 |\n\n: Table of Results {.striped .hover}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 18, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- 5 * (1-exp(-(.5)*x)) ^(4) * (.5*exp(-(.5)*x))\n\n\n## put into tibble and plot\nsamp_max_df <- tibble(x, density)\nggplot(data = samp_max_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()+\n  labs(title= \"PDF for Ymax of Exp(.5)\")\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 5, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- 2.5*exp(-(2.5)*x)\n\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal() +\n  labs(title= \"PDF for Ymin of Exp(.5)\")\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}