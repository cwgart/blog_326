---
title: "01 - Simulation"
date: "2025-05-05"
---
Mini Project 1: Simulation

```{r}
library(tidyverse)
```

Normal Min

```{r}
n <- 5       # sample size
mu <- 10     # population mean
sigma <- 2   # population standard deviation

# generate a random sample of n observations from a normal population
norm_single_sample <- rnorm(n, mu, sigma) |> round(2)
# look at the sample
norm_single_sample 

# compute the sample min
norm_sample_min <- min(norm_single_sample)
# look at the sample min
norm_sample_min   

# generate a range of values that span the population
plot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>
  mutate(xvals_density = dnorm(xvals, mu, sigma))

## plot the population model density curve
ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +
  geom_line() +
  theme_minimal() +
  ## add the sample points from your sample
  geom_jitter(data = tibble(norm_single_sample), aes(x = norm_single_sample, y = 0),
              width = 0, height = 0.005) +
  ## add a line for the sample min
  geom_vline(xintercept = norm_sample_min, colour = "red") +
  labs(x = "y", y = "density",
       title = "Normal with Mu = 10 and sigma = 2")
```

```{r}
n <- 5            # sample size
mu <- 10          # population mean
sigma <- 2        # population standard deviation

generate_samp_min <- function(mu, sigma, n) {
  
  norm_single_sample <- rnorm(n, mu, sigma)
  norm_sample_min <- min(norm_single_sample)
  
  return(norm_sample_min)
}

## test function once:
generate_samp_min(mu = mu, sigma = sigma, n = n)

nsim <- 5000      # number of simulations

## code to map through the function. 
## the \(i) syntax says to just repeat the generate_samp_min function
## nsim times
norm_mins <- map_dbl(1:nsim, \(i) generate_samp_min(mu = mu, sigma = sigma, n = n))

## print some of the 5000 mins
## each number represents the sample min from __one__ sample.
norm_mins_df <- tibble(norm_mins)
norm_mins_df

ggplot(data = norm_mins_df, aes(x = norm_mins)) +
  geom_histogram(colour = "deeppink4", fill = "deeppink1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample mins",
       title = paste("Sampling Distribution of the \nSample min when n =", n))

norm_mins_df |>
  summarise(mean_samp_dist = mean(norm_mins),
            var_samp_dist = var(norm_mins),
            sd_samp_dist = sd(norm_mins))
```

Normal Max

```{r}
n <- 5       # sample size
mu <- 10     # population mean
sigma <- 2   # population standard deviation

# generate a random sample of n observations from a normal population
single_sample <- rnorm(n, mu, sigma) |> round(2)
# look at the sample
single_sample 

# compute the sample min
sample_max <- max(single_sample)
# look at the sample min
sample_max   

# generate a range of values that span the population
plot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>
  mutate(xvals_density = dnorm(xvals, mu, sigma))

## plot the population model density curve
ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +
  geom_line() +
  theme_minimal() +
  ## add the sample points from your sample
  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),
              width = 0, height = 0.005) +
  ## add a line for the sample min
  geom_vline(xintercept = sample_max, colour = "red") +
  labs(x = "y", y = "density",
       title = "Normal with Mu = 10 and sigma = 2")
```

```{r}
n <- 5           # sample size
mu <- 10          # population mean
sigma <- 2        # population standard deviation

generate_samp_max <- function(mu, sigma, n) {
  
  single_sample <- rnorm(n, mu, sigma)
  sample_max <- max(single_sample)
  
  return(sample_max)
}

## test function once:
generate_samp_max(mu = mu, sigma = sigma, n = n)

nsim <- 5000      # number of simulations

## code to map through the function. 
## the \(i) syntax says to just repeat the generate_samp_min function
## nsim times
maxs <- map_dbl(1:nsim, \(i) generate_samp_max(mu = mu, sigma = sigma, n = n))

## print some of the 5000 mins
## each number represents the sample min from __one__ sample.
norm_maxs_df <- tibble(maxs)
norm_maxs_df

ggplot(data = norm_maxs_df, aes(x = maxs)) +
  geom_histogram(colour = "deeppink4", fill = "deeppink1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample maxs",
       title = paste("Sampling Distribution of the \nSample max when n =", n))

norm_maxs_df |>
  summarise(mean_samp_dist = mean(maxs),
            var_samp_dist = var(maxs),
            sd_samp_dist = sd(maxs))

```

Uniform Min

```{r}
n <- 5       # sample size
theta1 <- 7
theta2 <- 13
mu <- (theta1+theta2)/2   # population mean
sigma <- sqrt(((theta1+theta2)^2)/12 ) # population standard deviation

generate_unif_min <- function(theta1,theta2, n) {
  
  unif_single_sample <- runif(n, theta1,theta2)
  unif_sample_min <- min(unif_single_sample)
  
  return(unif_sample_min)
}

## test function once:
generate_unif_min(theta1 = theta1, theta2=theta2, n = n)
#> [1] 3.915946

nsim <- 5000      # number of simulations

unif_mins <- map_dbl(1:nsim, \(i) generate_unif_min(theta1 = theta1, theta2=theta2, n = n))

## print some of the 5000 means
## each number represents the sample mean from __one__ sample.
unif_mins_df <- tibble(unif_mins)
unif_mins_df

ggplot(data = unif_mins_df, aes(x = unif_mins)) +
  geom_histogram(colour = "darkolivegreen4", fill = "darkolivegreen1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample Mins",
       title = paste("Sampling Distribution of the \nSample min when n =", n))
```

```{r}
unif_mins_df |>
  summarise(mean_samp_dist = mean(unif_mins),
            var_samp_dist = var(unif_mins),
            sd_samp_dist = sd(unif_mins))
```

Uniform Max

```{r}
n <- 5       # sample size
theta1 <- 7
theta2 <- 13
mu <- (theta1+theta2)/2   # population mean
sigma <- sqrt(((theta1+theta2)^2)/12 ) # population standard deviation

generate_unif_max <- function(theta1,theta2, n) {
  
  unif_single_sample <- runif(n, theta1,theta2)
  unif_sample_max <- max(unif_single_sample)
  
  return(unif_sample_max)
}

## test function once:
generate_unif_max(theta1 = theta1, theta2=theta2, n = n)
#> [1] 3.915946

nsim <- 5000      # number of simulations

unif_maxs <- map_dbl(1:nsim, \(i) generate_unif_max(theta1 = theta1, theta2=theta2, n = n))

## print some of the 5000 means
## each number represents the sample mean from __one__ sample.
unif_maxs_df <- tibble(unif_maxs)
unif_maxs_df

ggplot(data = unif_maxs_df, aes(x = unif_maxs)) +
  geom_histogram(colour = "darkolivegreen4", fill = "darkolivegreen1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample Maxs",
       title = paste("Sampling Distribution of the \nSample max when n =", n))

unif_maxs_df |>
  summarise(mean_samp_dist = mean(unif_maxs),
            var_samp_dist = var(unif_maxs),
            sd_samp_dist = sd(unif_maxs))

```

Exponential Min

```{r}
n <- 5       # sample size
lambda <- .5
mu <- 1 / lambda   # population mean
sigma <- sqrt(1 / lambda ^ 2)  # population standard deviation

generate_exp_min <- function(lambda, n) {
  
  exp_single_sample <- rexp(n, lambda)
  exp_sample_min <- min(exp_single_sample)
  
  return(exp_sample_min)
}

## test function once:
generate_exp_min(lambda = lambda, n = n)
#> [1] 3.915946

nsim <- 5000      # number of simulations

exp_mins <- map_dbl(1:nsim, \(i) generate_exp_min(lambda = lambda, n = n))

## print some of the 5000 means
## each number represents the sample mean from __one__ sample.
exp_mins_df <- tibble(exp_mins)
exp_mins_df

ggplot(data = exp_mins_df, aes(x = exp_mins)) +
  geom_histogram(colour = "darkolivegreen4", fill = "darkolivegreen1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample Mins",
       title = paste("Sampling Distribution of the \nSample min when n =", n))
```

```{r}
exp_mins_df |>
  summarise(mean_samp_dist = mean(exp_mins),
            var_samp_dist = var(exp_mins),
            sd_samp_dist = sd(exp_mins))
```

Exponential Max

```{r}
n <- 5    # sample size
lambda <- .5
mu <- 1 / lambda   # population mean
sigma <- sqrt(1 / lambda ^ 2)  # population standard deviation

generate_exp_max <- function(lambda, n) {
  
  exp_single_sample <- rexp(n, lambda)
  exp_sample_max <- max(exp_single_sample)
  
  return(exp_sample_max)
}

## test function once:
generate_exp_max(lambda = lambda, n = n)
#> [1] 3.915946

nsim <- 5000      # number of simulations

exp_maxs <- map_dbl(1:nsim, \(i) generate_exp_max(lambda = lambda, n = n))

## print some of the 5000 means
## each number represents the sample mean from __one__ sample.
exp_maxs_df <- tibble(exp_maxs)
exp_maxs_df

ggplot(data = exp_maxs_df, aes(x = exp_maxs)) +
  geom_histogram(colour = "darkolivegreen4", fill = "darkolivegreen1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample Mins",
       title = paste("Sampling Distribution of the \nSample max when n =", n))
```

```{r}
exp_maxs_df |>
  summarise(mean_samp_dist = mean(exp_maxs),
            var_samp_dist = var(exp_maxs),
            sd_samp_dist = sd(exp_maxs))
```

Beta Min

```{r}
n <- 5       # sample size
alpha <- 8
beta <- 2
mu <- (alpha)/(alpha+beta)  # population mean
sigma <- sqrt((alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)) ) # population standard deviation

generate_beta_min <- function(alpha,beta, n) {
  
  beta_single_sample <- rbeta(n, alpha,beta)
  beta_sample_min <- min(beta_single_sample)
  
  return(beta_sample_min)
}

## test function once:
generate_beta_min(alpha = alpha, beta=beta, n = n)
#> [1] 3.915946

nsim <- 5000      # number of simulations

beta_mins <- map_dbl(1:nsim, \(i) generate_beta_min(alpha = alpha, beta=beta, n = n))

## print some of the 5000 means
## each number represents the sample mean from __one__ sample.
beta_mins_df <- tibble(beta_mins)
beta_mins_df

ggplot(data = beta_mins_df, aes(x = beta_mins)) +
  geom_histogram(colour = "darkolivegreen4", fill = "darkolivegreen1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample Mins",
       title = paste("Sampling Distribution of the \nSample min when n =", n))
```

```{r}
beta_mins_df |>
  summarise(mean_samp_dist = mean(beta_mins),
            var_samp_dist = var(beta_mins),
            sd_samp_dist = sd(beta_mins))
```

Beta Max

```{r}
n <- 5       # sample size
alpha <- 8
beta <- 2
mu <- (alpha)/(alpha+beta)  # population mean
sigma <- sqrt((alpha*beta)/(((alpha+beta)^2)*(alpha+beta+1)) ) # population standard deviation

generate_beta_max <- function(alpha,beta, n) {
  
  single_sample <- rbeta(n, alpha,beta)
  sample_max <- max(single_sample)
  
  return(sample_max)
}

## test function once:
generate_beta_max(alpha = alpha, beta=beta, n = n)
#> [1] 3.915946

nsim <- 5000      # number of simulations

maxs <- map_dbl(1:nsim, \(i) generate_beta_max(alpha = alpha, beta=beta, n = n))

## print some of the 5000 means
## each number represents the sample mean from __one__ sample.
beta_maxs_df <- tibble(maxs)
beta_maxs_df

ggplot(data = beta_maxs_df, aes(x = maxs)) +
  geom_histogram(colour = "darkolivegreen4", fill = "darkolivegreen1", bins = 20) +
  theme_minimal() +
  labs(x = "Observed Sample Maxs",
       title = paste("Sampling Distribution of the \nSample max when n =", n))


beta_maxs_df |>
  summarise(mean_samp_dist = mean(maxs),
            var_samp_dist = var(maxs),
            sd_samp_dist = sd(maxs))
```

```{r}
library(tidyverse)
## create population graphs


norm_df <- tibble(x = seq(3, 17, length.out = 1000),
                  dens = dnorm(x, mean = 10, sd = 2),
                  pop = "normal(10, 4)")
unif_df <- tibble(x = seq(7, 13, length.out = 1000),
                  dens = dunif(x, 7, 13),
                  pop = "uniform(7, 13)")
exp_df <- tibble(x = seq(0, 10, length.out = 1000),
                 dens = dexp(x, 0.5),
                 pop = "exp(0.5)")
beta_df <- tibble(x = seq(0, 1, length.out = 1000),
                  dens = dbeta(x, 8, 2),
                  pop = "beta(8, 2)")

pop_plot <- bind_rows(norm_df, unif_df, exp_df, beta_df) |>
  mutate(pop = fct_relevel(pop, c("normal(10, 4)", "uniform(7, 13)",
                                  "exp(0.5)", "beta(8, 2)")))


ggplot(data = pop_plot, aes(x = x, y = dens)) +
  geom_line() +
  theme_minimal() +
  facet_wrap(~ pop, nrow = 1, scales = "free") +
  labs(title = "Population Distributions for Each Simulation Setting")


```

I wasn't able to plot the histograms together like this, so I made histograms throughout the document for Ymax and Ymin of each distribution.

|                      | $\text{N}(\mu = 10, \sigma^2 = 4)$ | $\text{Unif}(\theta_1 = 7, \theta_2 = 13)$ | $\text{Exp}(\lambda = 0.5)$ | $\text{Beta}(\alpha = 8, \beta = 2)$ |
|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|
| $\text{E}(Y_{min})$  |                7.65                |                    7.98                    |             .4              |                 .65                  |
| $\text{E}(Y_{max})$  |               12.34                |                   12.01                    |            4.55             |                 .93                  |
|                      |                                    |                                            |                             |                                      |
| $\text{SE}(Y_{min})$ |                1.35                |                    .83                     |             .4              |                 .11                  |
| $\text{SE}(Y_{max})$ |                1.35                |                    .83                     |            2.37             |                 .045                 |

: Table of Results {.striped .hover}

```{r}
n <- 5
## CHANGE 0 and 3 to represent where you want your graph to start and end
## on the x-axis
x <- seq(0, 18, length.out = 1000)
## CHANGE to be the pdf you calculated. Note that, as of now, 
## this is not a proper density (it does not integrate to 1).
density <- 5 * (1-exp(-(.5)*x)) ^(4) * (.5*exp(-(.5)*x))


## put into tibble and plot
samp_max_df <- tibble(x, density)
ggplot(data = samp_max_df, aes(x = x, y = density)) +
  geom_line() +
  theme_minimal()+
  labs(title= "PDF for Ymax of Exp(.5)")
```

```{r}
n <- 5
## CHANGE 0 and 3 to represent where you want your graph to start and end
## on the x-axis
x <- seq(0, 5, length.out = 1000)
## CHANGE to be the pdf you calculated. Note that, as of now, 
## this is not a proper density (it does not integrate to 1).
density <- 2.5*exp(-(2.5)*x)


## put into tibble and plot
samp_min_df <- tibble(x, density)
ggplot(data = samp_min_df, aes(x = x, y = density)) +
  geom_line() +
  theme_minimal() +
  labs(title= "PDF for Ymin of Exp(.5)")
  
```
